"use strict";function WEBRTC(configuration=null){const peer=new RTCPeerConnection(configuration||{iceServers:[{urls:["stun:stun1.l.google.com:19302","stun:stun2.l.google.com:19302","stun:stun3.l.google.com:19302","stun:stun4.l.google.com:19302"]}]});let dataChannels={},tracks={},sendHandler=null;const send=e=>{sendHandler&&"function"==typeof sendHandler&&sendHandler(e)};let dataChannelHandler=null;let trackHandler=null;let connectedHandler=null;let disconnectedHandler=null;peer.oniceconnectionstatechange=(e=>{"connected"===e.target.iceConnectionState&&connectedHandler&&"function"==typeof connectedHandler&&connectedHandler({type:"connected"}),"disconnected"===e.target.iceConnectionState&&disconnectedHandler&&"function"==typeof disconnectedHandler&&disconnectedHandler({type:"disconnected"})}),peer.onnegotiationneeded=(async e=>{const offer=await peer.createOffer();await peer.setLocalDescription(offer),send({description:peer.localDescription.toJSON()}),peer.onicecandidate=(async e=>{e.candidate&&send({candidate:e.candidate.toJSON()})})}),peer.ondatachannel=(e=>{dataChannelHandler&&"function"==typeof dataChannelHandler&&dataChannelHandler(e),dataChannels[e.channel.label]=e.channel}),peer.ontrack=(e=>{trackHandler&&"function"==typeof trackHandler&&trackHandler(e),tracks[e.track.id]=e.track});return{peerConnection:peer,createDataChannel:(label=null,options={})=>{let dataChannel=peer.createDataChannel(label,options);return dataChannels[label]=dataChannel,dataChannel},addTrack:(track,stream)=>peer.addTrack(track,stream),listen:async({description:description,candidate:candidate})=>{description?(await peer.setRemoteDescription(description),"offer"===description.type&&(await peer.setLocalDescription(await peer.createAnswer()),send({description:peer.localDescription.toJSON()}),peer.onicecandidate=(async e=>{e.candidate&&send({candidate:e.candidate.toJSON()})}))):candidate&&await peer.addIceCandidate(candidate)},onSend:cb=>{sendHandler=cb},onTrack:cb=>{trackHandler=cb},onDataChannel:cb=>{dataChannelHandler=cb},onConnected:cb=>{connectedHandler=cb},onDisconnected:cb=>{disconnectedHandler=cb},tracks:tracks,dataChannels:dataChannels,close:()=>{peer.close(),disconnectedHandler({type:"disconnected"})}}}