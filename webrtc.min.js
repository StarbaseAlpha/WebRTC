"use strict";function WEBRTC(configuration=null){const peer=new RTCPeerConnection(configuration||{iceServers:[{urls:["stun:stun1.l.google.com:19302","stun:stun2.l.google.com:19302","stun:stun3.l.google.com:19302","stun:stun4.l.google.com:19302"]}]});let sendHandler=null;const send=e=>{sendHandler&&"function"==typeof sendHandler&&sendHandler(e)};let eventHandler=null;const Event=m=>{eventHandler&&"function"==typeof eventHandler&&eventHandler(m)};peer.oniceconnectionstatechange=(e=>{"connected"===e.target.iceConnectionState&&Event({type:"connected"}),"disconnected"===e.target.iceConnectionState&&Event({type:"disconnected"})}),peer.onnegotiationneeded=(async e=>{const offer=await peer.createOffer();await peer.setLocalDescription(offer),send({description:peer.localDescription.toJSON()}),peer.onicecandidate=(async e=>{e.candidate&&send({candidate:e.candidate.toJSON()})})}),peer.ondatachannel=(e=>{Event(e)}),peer.ontrack=(e=>{Event(e)});return{pc:peer,createDataChannel:async(label=null,options={})=>peer.createDataChannel(label,options),addTrack:async(track,stream)=>{await peer.addTrack(track,stream)},listen:async({description:description,candidate:candidate})=>{description?(await peer.setRemoteDescription(description),"offer"===description.type&&(await peer.setLocalDescription(await peer.createAnswer()),send({description:peer.localDescription.toJSON()}),peer.onicecandidate=(async e=>{e.candidate&&send({candidate:e.candidate.toJSON()})}))):candidate&&await peer.addIceCandidate(candidate)},onSend:cb=>{sendHandler=cb},onEvent:cb=>{eventHandler=cb}}}