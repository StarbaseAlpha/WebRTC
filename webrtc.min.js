"use strict";function WEBRTC(send,stunURLs=[]){let onState=null,calls={},stateHandler=(conn,state)=>{onState&&"function"==typeof onState&&onState(conn,state)};const config={iceServers:[{urls:stunURLs}]},sdpConstraints={},ChannelOpen=(e,pc,id)=>{stateHandler(calls[id],{type:"channel",channel:e.target.label,message:"Data channel open"})},ChannelAdded=(e,pc,id)=>{let label=e.channel.label;return calls[id].data[label]=e.channel,calls[id].data[label].onopen=(e=>{ChannelOpen(e,pc,id)}),calls[id].data[label]},TrackAdded=(e,pc,id)=>{calls[id].tracks||(calls[id].tracks=[]),calls[id].tracks.push(e.track),stateHandler(calls[id],{type:"track",track:e.track,message:"Media track added"})};return{calls:calls,call:function(to,stream=null){return new Promise((resolve,reject)=>{let id=crypto.getRandomValues(new Uint8Array(32)).join("").toString().slice(0,16),pc=new RTCPeerConnection(config);if(calls[id]={id:id,pc:pc},calls[id].data={},calls[id].data.chat=pc.createDataChannel("chat"),calls[id].data.chat.onopen=(e=>{ChannelOpen(e,pc,id)}),stream)for(let track of stream.getTracks())pc.addTrack(track);pc.ondatachannel=(e=>{ChannelAdded(e,pc,id)}),pc.ontrack=(e=>{TrackAdded(e,pc,id)}),pc.createOffer().then(function(e){pc.setLocalDescription(e),send({id:id,to:to.toString(),type:"call",stream:!!stream,call:{desc:pc.localDescription}}),pc.onicecandidate=(e=>{e.candidate&&send({id:id,to:to.toString(),type:"call",stream:!!stream,call:{candidate:e.candidate}})}),resolve(calls[id])})})},answer:function(call,stream){return new Promise((resolve,reject)=>{if(!call&&!call.id&&"call"===!call.type)return null;if(calls[call.id]&&call.call&&call.call.candidate)return calls[call.id].pc.addIceCandidate(call.call.candidate||null),null;let id=call.id,to=call.from.toString(),pc=new RTCPeerConnection(config);if(calls[id]={id:id,pc:pc,data:{}},stream)for(let track of stream.getTracks())pc.addTrack(track);pc.ondatachannel=(e=>{ChannelAdded(e,pc,id)}),pc.ontrack=(e=>{TrackAdded(e,pc,id)});const offerDesc=new RTCSessionDescription(call.call.desc||null);pc.setRemoteDescription(offerDesc),pc.createAnswer(answerDesc=>{pc.setLocalDescription(answerDesc),send({id:id,to:to.toString(),type:"answer",answer:{desc:answerDesc}}),resolve(call[id]),pc.onicecandidate=(e=>{e.candidate&&send({id:id,to:to.toString(),type:"answer",answer:{candidate:e.candidate}})})},()=>{console.warn("Couldn't create offer")},sdpConstraints)})},gotAnswer:function(answer){if(!answer&&!answer.id&&!calls[answer.id]&&"answer"!==answer.type)return null;const conn=calls[answer.id];if(answer.answer&&answer.answer.candidate)return conn.pc.addIceCandidate(answer.answer.candidate),null;const answerDesc=new RTCSessionDescription(answer.answer.desc||null);conn.pc.setRemoteDescription(answerDesc)},onState:cb=>{onState=cb}}}